{"version":3,"sources":["menu/Menu.js","dashboard/Dashboard.js","header/Header.js","configurations/Configurations.js","services/Services.js","serviceproviders/ServiceProviders.js","frame/Frame.js","App.js","serviceWorker.js","index.js"],"names":["Menu","location","useLocation","menuItems","path","includes","map","menuItem","to","link","key","className","active","pathname","icon","label","Dashboard","Header","type","placeholder","ConfigurationForm","useRouteMatch","fieldsRaw","url","apiSwaggerDoc","definitions","CreateServiceConfigurationCommand","properties","fields","Object","keys","fieldKey","fieldLabel","toLowerCase","split","join","replace","c","toUpperCase","fieldObject","fieldType","hasOwnProperty","name","id","enum","val","value","ConfigurationNew","ConfigurationList","Configurations","exact","ServiceForm","CreateEregServiceCommand","ServiceNew","ServiceList","Services","ServiceProviderForm","CreateServiceProviderCommand","ServiceProviderNew","ServiceProviderList","ServiceProviders","Frame","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c561c4af.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Menu.scss\"\nimport {\n    Link,\n    useLocation\n} from \"react-router-dom\";\n\nfunction Menu(){\n\n    const menu = [\n        {\n            \"icon\":\"icon-dashboard\",\n            \"label\":\"Dashboard\",\n            \"active\":(path) => (path === \"/\")+\"\",\n            \"link\":\"/\"\n        },\n        {\n            \"icon\":\"icon-folder\",\n            \"label\":\"Service Providers\",\n            \"active\":(path) => path.includes(\"/serviceproviders\")+\"\",\n            \"link\":\"/serviceproviders\"\n        },\n        {\n            \"icon\":\"icon-files\",\n            \"label\":\"Services\",\n            \"active\":(path) => path.includes(\"/services\")+\"\",\n            \"link\":\"/services\"\n        },\n        {\n            \"icon\":\"icon-sliders\",\n            \"label\":\"Configurations\",\n            \"active\":(path) => path.includes(\"/configurations\")+\"\",\n            \"link\":\"/configurations\"\n        }\n    ];\n\n    const location = useLocation();\n\n    const menuItems = menu.map((menuItem)=>\n        <Link to={menuItem.link} key={menuItem.link}>\n            <div className={\"menu_item \" + ((menuItem.active(location.pathname) === \"true\")?\"active\":\"\")}>\n                <div className=\"menu_icon\">\n                    <div className={\"icon \"+ menuItem.icon}></div>\n                </div>\n                <div className=\"menu_label noselect\">\n                    {menuItem.label}\n                </div>\n            </div>\n        </Link>\n    );\n\n    return(\n        <div className=\"menu\">\n            {menuItems}\n        </div>\n    )\n}\n\nexport default Menu","import React from \"react\";\n\nfunction Dashboard(){\n    return(\n        <div>\n            Dashboard\n        </div>\n    )\n}\n\nexport default Dashboard","import React from \"react\";\nimport \"./Header.scss\"\n\nfunction Header(){\n    return(\n        <div className=\"header\">\n            <div className=\"left\">\n                <div className=\"search\">\n                    <div className=\"search_icon\">\n                        <div className=\"icon icon-search\"></div>\n                    </div>\n                    <input className=\"search_text\" type=\"text\" placeholder=\"Search...\"/>\n                </div>\n            </div>\n            <div className=\"right\">\n\n            </div>\n        </div>\n    )\n}\n\nexport default Header","import React from \"react\";\n\nimport {\n    Switch,\n    Route,\n    Link,\n    useRouteMatch\n} from \"react-router-dom\";\n\nimport \"./Configurations.scss\";\nimport apiSwaggerDoc from \"../api-swagger-doc\";\n\nfunction ConfigurationForm(){\n    const {path,url} = useRouteMatch();\n\n    const fieldsRaw = apiSwaggerDoc.definitions.CreateServiceConfigurationCommand.properties;\n    const fields = Object.keys(fieldsRaw).map((fieldKey)=>{\n        const fieldLabel = fieldKey.toLowerCase().split('configuration').join('').replace(/^\\w/, c => c.toUpperCase());\n        const fieldObject = fieldsRaw[fieldKey];\n        let fieldType = \"text\";\n        if(fieldObject.hasOwnProperty(\"enum\")){\n            fieldType = \"select\"\n        }\n\n        return(\n            <div className=\"field\" key={fieldKey}>\n                <label className=\"field_label\">\n                    {fieldLabel}\n                </label>\n                {fieldType == \"text\" &&\n                <input type=\"text\"/>\n                }\n                {fieldType == \"select\" &&\n                <select name=\"\" id=\"\">\n                    {fieldObject.enum.map((val)=>\n                        <option value={val}>{val}</option>\n                    )}\n                </select>\n                }\n            </div>\n        )\n    });\n\n    return(\n        <>\n            <div className=\"configuration--form--body\">\n                {fields}\n            </div>\n            <div className=\"configuration--form--footer\">\n\n                <Link to={`/configurations`} className=\"btn cancel\">\n                    <div className=\"label\">\n                        Cancel\n                    </div>\n                </Link>\n\n                <div className=\"btn create\">\n                    <div className=\"label\">Create configuration</div>\n                </div>\n\n            </div>\n        </>\n    )\n}\n\nfunction ConfigurationNew(){\n    return(\n        <div className=\"configuration--new\">\n            <div className=\"title\">\n                Create Configuration\n            </div>\n            <ConfigurationForm/>\n        </div>\n    )\n}\n\nfunction ConfigurationEdit(){\n    return(\n        <div className=\"configuration--edit\">\n\n        </div>\n    )\n}\n\n\nfunction ConfigurationList(){\n    const {url} = useRouteMatch();\n\n    return(\n        <div className=\"configuration--list\">\n            <div className=\"ctrls\">\n                <Link to={`${url}/new`} className=\"btn new\">\n                    <div className=\"icon\">\n                        +\n                    </div>\n                    <div className=\"label\">\n                        New\n                    </div>\n                </Link>\n            </div>\n        </div>\n    )\n}\n\n\nfunction ConfigurationView(){\n    return(\n        <div className=\"configuration--view\">\n\n        </div>\n    )\n}\n\nfunction Configurations(){\n\n    const {path} = useRouteMatch();\n\n    return(\n        <div className=\"configurations\">\n            <div className=\"title\">\n                Configurations\n            </div>\n            <Switch>\n                <Route path={`${path}/new`}>\n                    <ConfigurationNew/>\n                </Route>\n                <Route exact path={path}>\n                    <ConfigurationList/>\n                </Route>\n            </Switch>\n        </div>\n    )\n}\n\nexport default Configurations","import React from \"react\";\n\nimport {\n    Switch,\n    Route,\n    Link,\n    useRouteMatch\n} from \"react-router-dom\";\n\nimport \"./Services.scss\";\nimport apiSwaggerDoc from \"../api-swagger-doc\";\n\nfunction ServiceForm(){\n    const {path,url} = useRouteMatch();\n\n    const fieldsRaw = apiSwaggerDoc.definitions.CreateEregServiceCommand.properties;\n    const fields = Object.keys(fieldsRaw).map((fieldKey)=>{\n        const fieldLabel = fieldKey.toLowerCase().split('service').join('').replace(/^\\w/, c => c.toUpperCase());\n        const fieldObject = fieldsRaw[fieldKey];\n        let fieldType = \"text\";\n        if(fieldObject.hasOwnProperty(\"enum\")){\n            fieldType = \"select\"\n        }\n\n        return(\n            <div className=\"field\" key={fieldKey}>\n                <label className=\"field_label\">\n                    {fieldLabel}\n                </label>\n                {fieldType == \"text\" &&\n                <input type=\"text\"/>\n                }\n                {fieldType == \"select\" &&\n                <select name=\"\" id=\"\">\n                    {fieldObject.enum.map((val)=>\n                        <option value={val}>{val}</option>\n                    )}\n                </select>\n                }\n            </div>\n        )\n    });\n\n    return(\n        <>\n            <div className=\"service--form--body\">\n                {fields}\n            </div>\n            <div className=\"service--form--footer\">\n\n                <Link to={`/services`} className=\"btn cancel\">\n                    <div className=\"label\">\n                        Cancel\n                    </div>\n                </Link>\n\n                <div className=\"btn create\">\n                    <div className=\"label\">Create service</div>\n                </div>\n\n            </div>\n        </>\n    )\n}\n\nfunction ServiceNew(){\n    return(\n        <div className=\"service--new\">\n            <div className=\"title\">\n                Create Service\n            </div>\n            <ServiceForm/>\n        </div>\n    )\n}\n\nfunction ServiceEdit(){\n    return(\n        <div className=\"service--edit\">\n\n        </div>\n    )\n}\n\n\nfunction ServiceList(){\n    const {url} = useRouteMatch();\n\n    return(\n        <div className=\"service--list\">\n            <div className=\"ctrls\">\n                <Link to={`${url}/new`} className=\"btn new\">\n                    <div className=\"icon\">\n                        +\n                    </div>\n                    <div className=\"label\">\n                        New\n                    </div>\n                </Link>\n            </div>\n        </div>\n    )\n}\n\n\nfunction ServiceView(){\n    return(\n        <div className=\"service--view\">\n\n        </div>\n    )\n}\n\nfunction Services(){\n\n    const {path} = useRouteMatch();\n\n    return(\n        <div className=\"services\">\n            <div className=\"title\">\n                Services\n            </div>\n            <Switch>\n                <Route path={`${path}/new`}>\n                    <ServiceNew/>\n                </Route>\n                <Route exact path={path}>\n                    <ServiceList/>\n                </Route>\n            </Switch>\n        </div>\n    )\n}\n\nexport default Services","import React from \"react\";\n\nimport {\n    Switch,\n    Route,\n    Link,\n    useRouteMatch\n} from \"react-router-dom\";\n\nimport \"./ServiceProviders.scss\";\nimport apiSwaggerDoc from \"../api-swagger-doc\";\n\nfunction ServiceProviderForm(){\n    const {path,url} = useRouteMatch();\n\n    const fieldsRaw = apiSwaggerDoc.definitions.CreateServiceProviderCommand.properties;\n    const fields = Object.keys(fieldsRaw).map((fieldKey)=>{\n        const fieldLabel = fieldKey.toLowerCase().split('serviceprovider').join('').replace(/^\\w/, c => c.toUpperCase());\n        const fieldObject = fieldsRaw[fieldKey];\n        let fieldType = \"text\";\n        if(fieldObject.hasOwnProperty(\"enum\")){\n            fieldType = \"select\"\n        }\n\n        return(\n            <div className=\"field\" key={fieldKey}>\n                <label className=\"field_label\">\n                    {fieldLabel}\n                </label>\n                {fieldType == \"text\" &&\n                    <input type=\"text\"/>\n                }\n                {fieldType == \"select\" &&\n                    <select name=\"\" id=\"\">\n                        {fieldObject.enum.map((val)=>\n                            <option value={val}>{val}</option>\n                        )}\n                    </select>\n                }\n            </div>\n        )\n    });\n\n    return(\n        <>\n            <div className=\"serviceprovider--form--body\">\n                {fields}\n            </div>\n            <div className=\"serviceprovider--form--footer\">\n\n                <Link to={`/serviceproviders`} className=\"btn cancel\">\n                    <div className=\"label\">\n                        Cancel\n                    </div>\n                </Link>\n\n                <div className=\"btn create\">\n                    <div className=\"label\">Create service provider</div>\n                </div>\n\n            </div>\n        </>\n    )\n}\n\nfunction ServiceProviderNew(){\n    return(\n        <div className=\"serviceprovider--new\">\n            <div className=\"title\">\n                Create Service Provider\n            </div>\n            <ServiceProviderForm/>\n        </div>\n    )\n}\n\nfunction ServiceProviderEdit(){\n    return(\n        <div className=\"serviceprovider--edit\">\n\n        </div>\n    )\n}\n\n\nfunction ServiceProviderList(){\n    const {url} = useRouteMatch();\n\n    return(\n        <div className=\"serviceprovider--list\">\n            <div className=\"ctrls\">\n                <Link to={`${url}/new`} className=\"btn new\">\n                    <div className=\"icon\">\n                        +\n                    </div>\n                    <div className=\"label\">\n                        New\n                    </div>\n                </Link>\n            </div>\n        </div>\n    )\n}\n\n\nfunction ServiceProviderView(){\n    return(\n        <div className=\"serviceprovider--view\">\n\n        </div>\n    )\n}\n\nfunction ServiceProviders(){\n\n    const {path} = useRouteMatch();\n\n    return(\n        <div className=\"serviceproviders\">\n            <div className=\"title\">\n                Service Providers\n            </div>\n            <Switch>\n                <Route path={`${path}/new`}>\n                    <ServiceProviderNew/>\n                </Route>\n                <Route exact path={path}>\n                    <ServiceProviderList/>\n                </Route>\n            </Switch>\n        </div>\n    )\n}\n\nexport default ServiceProviders","import React from \"react\";\n\nimport {\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport \"./Frame.scss\"\nimport Menu from \"../menu/Menu\";\nimport Dashboard from \"../dashboard/Dashboard\";\nimport Header from \"../header/Header\";\nimport Configurations from \"../configurations/Configurations\";\nimport Services from \"../services/Services\";\nimport ServiceProviders from \"../serviceproviders/ServiceProviders\";\n\nfunction Frame(){\n    return (\n\n        <div className=\"frame\">\n            <div className=\"frame--left\">\n                <Menu/>\n            </div>\n            <div className=\"frame--right\">\n                <Header/>\n                    <Switch>\n                        <Route path=\"/configurations\">\n                            <Configurations/>\n                        </Route>\n                        <Route path=\"/serviceproviders\">\n                            <ServiceProviders/>\n                        </Route>\n                        <Route path=\"/services\">\n                            <Services/>\n                        </Route>\n                        <Route path=\"/\">\n                            <Dashboard/>\n                        </Route>\n                    </Switch>\n            </div>\n        </div>\n    )\n}\n\nexport default Frame","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\n\nimport \"./App.scss\"\nimport Frame from \"./frame/Frame\";\n\nfunction App() {\n  return (\n      <Router>\n        <Frame/>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}